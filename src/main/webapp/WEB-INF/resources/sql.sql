
create schema mantenimiento;
use mantenimiento;





-- MySQL Script generated by MySQL Workbench
-- 01/11/16 11:12:40
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mantenimiento
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mantenimiento
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mantenimiento` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `mantenimiento` ;

-- -----------------------------------------------------
-- Table `mantenimiento`.`form`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mantenimiento`.`form` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `equipo` VARCHAR(45) NULL COMMENT '',
  `fecha_realizacion` DATE NULL COMMENT '',
  `fecha_programada` DATE NULL COMMENT '',
  `nro_interno` INT NULL COMMENT '',
  `nro_orden` INT NULL COMMENT '',
  `epp_obligatorio` INT NULL COMMENT '',
  `epp_opcional` INT NULL COMMENT '',
  `conclusion` TINYINT(1) NULL COMMENT '',
  `observaciones` VARCHAR(45) NULL COMMENT '',
  `formcol` VARCHAR(45) NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mantenimiento`.`form_item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mantenimiento`.`form_item` (
  `idform_item` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `form_id` INT NOT NULL COMMENT '',
  `label` VARCHAR(250) NULL COMMENT '',
  `posee` VARCHAR(45) NULL COMMENT '',
  `estado` VARCHAR(45) NULL COMMENT '',
  `observaciones` VARCHAR(1500) NULL COMMENT '',
  PRIMARY KEY (`idform_item`)  COMMENT '',
  INDEX `fk_form_item_form_idx` (`form_id` ASC)  COMMENT '',
  CONSTRAINT `fk_form_item_form`
    FOREIGN KEY (`form_id`)
    REFERENCES `mantenimiento`.`form` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mantenimiento`.`epp_obligatorio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mantenimiento`.`epp_obligatorio` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `form_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_epp_obligatorio_form1_idx` (`form_id` ASC)  COMMENT '',
  CONSTRAINT `fk_epp_obligatorio_form1`
    FOREIGN KEY (`form_id`)
    REFERENCES `mantenimiento`.`form` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mantenimiento`.`epp_opcional`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mantenimiento`.`epp_opcional` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `form_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_epp_opcional_form1_idx` (`form_id` ASC)  COMMENT '',
  CONSTRAINT `fk_epp_opcional_form1`
    FOREIGN KEY (`form_id`)
    REFERENCES `mantenimiento`.`form` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mantenimiento`.`epp`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mantenimiento`.`epp` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `nombre` VARCHAR(45) NULL COMMENT '',
  `descripcion` VARCHAR(45) NULL COMMENT '',
  `imagen` VARCHAR(1500) NULL COMMENT '',
  `epp_obligatorio_id` INT NOT NULL COMMENT '',
  `epp_opcional_id` INT NOT NULL COMMENT '',
  PRIMARY KEY (`id`)  COMMENT '',
  INDEX `fk_epp_epp_obligatorio1_idx` (`epp_obligatorio_id` ASC)  COMMENT '',
  INDEX `fk_epp_epp_opcional1_idx` (`epp_opcional_id` ASC)  COMMENT '',
  CONSTRAINT `fk_epp_epp_obligatorio1`
    FOREIGN KEY (`epp_obligatorio_id`)
    REFERENCES `mantenimiento`.`epp_obligatorio` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_epp_epp_opcional1`
    FOREIGN KEY (`epp_opcional_id`)
    REFERENCES `mantenimiento`.`epp_opcional` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;




/*All User's are stored in APP_USER table*/
create table APP_USER (
   id BIGINT NOT NULL AUTO_INCREMENT,
   sso_id VARCHAR(30) NOT NULL,
   password VARCHAR(100) NOT NULL,
   first_name VARCHAR(30) NOT NULL,
   last_name  VARCHAR(30) NOT NULL,
   email VARCHAR(30) NOT NULL,
   state VARCHAR(30) NOT NULL,  
   PRIMARY KEY (id),
   UNIQUE (sso_id)
);
  
/* USER_PROFILE table contains all possible roles */
create table USER_PROFILE(
   id BIGINT NOT NULL AUTO_INCREMENT,
   type VARCHAR(30) NOT NULL,
   PRIMARY KEY (id),
   UNIQUE (type)
);
  
/* JOIN TABLE for MANY-TO-MANY relationship*/ 
CREATE TABLE APP_USER_USER_PROFILE (
    user_id BIGINT NOT NULL,
    user_profile_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, user_profile_id),
    CONSTRAINT FK_APP_USER FOREIGN KEY (user_id) REFERENCES APP_USER (id),
    CONSTRAINT FK_USER_PROFILE FOREIGN KEY (user_profile_id) REFERENCES USER_PROFILE (id)
);

/* Populate USER_PROFILE Table */
/*INSERT INTO USER_PROFILE(type)
VALUES ('USER');*/
 
INSERT INTO USER_PROFILE(type)
VALUES ('ADMIN');

INSERT INTO USER_PROFILE(type)
VALUES ('USUARIO ');
 
INSERT INTO USER_PROFILE(type)
VALUES ('DBA');
 
/* Populate APP_USER Table */
INSERT INTO APP_USER(sso_id, password, first_name, last_name, email, state)
VALUES ('admin','admin', 'admin','admin','bill@xyz.com', 'Active');
 
INSERT INTO APP_USER(sso_id, password, first_name, last_name, email, state)
VALUES ('user','user', 'user','user','danny@xyz.com', 'Active');
 
INSERT INTO APP_USER(sso_id, password, first_name, last_name, email, state)
VALUES ('sam','abc125', 'Sam','Smith','samy@xyz.com', 'Active');
 
INSERT INTO APP_USER(sso_id, password, first_name, last_name, email, state)
VALUES ('nicole','abc126', 'Nicole','warner','nicloe@xyz.com', 'Active');
 
INSERT INTO APP_USER(sso_id, password, first_name, last_name, email, state)
VALUES ('kenny','abc127', 'Kenny','Roger','kenny@xyz.com', 'Active');
 
/* Populate JOIN Table */
INSERT INTO APP_USER_USER_PROFILE (user_id, user_profile_id)
  SELECT user.id, profile.id FROM app_user user, user_profile profile  
  where user.sso_id='admin' and profile.type='USUARIO';
 
INSERT INTO APP_USER_USER_PROFILE (user_id, user_profile_id)
  SELECT user.id, profile.id FROM app_user user, user_profile profile
  where user.sso_id='admin' and profile.type='DBA';
 
INSERT INTO APP_USER_USER_PROFILE (user_id, user_profile_id)
  SELECT user.id, profile.id FROM app_user user, user_profile profile
  where user.sso_id='admin' and profile.type='ADMIN';
  
 INSERT INTO APP_USER_USER_PROFILE (user_id, user_profile_id)
  SELECT user.id, profile.id FROM app_user user, user_profile profile  
  where user.sso_id='user' and profile.type='USUARIO';
 
INSERT INTO APP_USER_USER_PROFILE (user_id, user_profile_id)
  SELECT user.id, profile.id FROM app_user user, user_profile profile
  where user.sso_id='operario' and profile.type='OPERARIO';
 
  
 select * from APP_USER_USER_PROFILE inner join app_user on app_user.id = app_user_user_profile.USER_ID inner join user_profile on user_profile.id = app_user_user_profile.USER_PROFILE_ID; 
 select * from app_user_user_profile;
  